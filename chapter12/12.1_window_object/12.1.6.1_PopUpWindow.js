/**
 * 12.1.6.1 弹出窗口
 * 
 * 如果window.open()的第二个参数不是已有窗口, 则会打开一个新窗口或标签页
 * 第三个参数, 即特性字符串, 用于指定新窗口的配置
 * 如果没有传第三个参数, 则新窗口或标签页会带有所有默认的浏览器特性.
 * 如果打开的不是新窗口, 则会忽略第三个参数
 * 
 * 特性字符串是一个逗号分隔的设置字符串, 用于指定新窗口包含的特性
 * |------------|------------|--------------------------------|
 * | fullscreen | "yes"/"no" | 表示新窗口是否最大化, 仅限IE
 * |------------|------------|--------------------------------|
 * | height     | number     | 新窗口的高度, 这个值不能小于100
 * |------------|------------|--------------------------------|
 * | left       | number     | 新窗口的x轴坐标, 这个值不能是负值
 * |------------|------------|--------------------------------|
 * | location   | "yes"/"no" | 是否显示地址栏, 因浏览器而异
 * |------------|------------|--------------------------------|
 * | Menubar    | "yes"/"no" | 是否显示菜单栏, 默认"no"
 * |------------|------------|--------------------------------|
 * | resizeable | "yes"/"no" | 是否可以拖动改变新窗口大小, 默认"no"
 * |------------|------------|--------------------------------|
 * | scrollbars | "yes"/"no" | 是否可以在内容过长时滚动, 默认"no"
 * |------------|------------|--------------------------------|
 * | status     | "yes"/"no" | 是否显示状态栏, 因浏览器而异
 * |------------|------------|--------------------------------|
 * | toolbar    | "yes"/"no" | 是否显示工具栏, 默认"no"
 * |------------|------------|--------------------------------|
 * | top        | number     | 新窗口的y轴坐标, 这个值不能是负值
 * |------------|------------|--------------------------------|
 * | width      | number     | 新窗口的宽度, 这个值不能小于100
 * |------------|------------|--------------------------------|
 * 
 * 这些设置需要已逗号分隔的名值对形式出现, 其中名值对以逗号链接.
 * 特性字符串中不能包含空格.
 * 
 * 这行代码会打开一个可缩放的新窗口, 大小为400像素*400像素, 位于屏幕左边及顶边各10像素的位置
 */
window.open("http://www.wrox.com", "wroxWindow", "height=400,width=400,top=10,left=10,resizeable=yes");

/**
 * window.open()方法返回一个对新建窗口的引用.
 * 这个对象与普通window对象没有区别, 只是为控制新窗口提供了方便.
 * 跟使用任何window对象一样, 可以使用这个对象操纵新打开的窗口
 */
let baiduWin = window.open("https://www.baidu.com", "baiduWindow", "height=400,width=400,top=10,left=10,resizeable=yes");

// 缩放
baiduWin.resizeTo(500, 500);

// 移动
baiduWin.moveTo(100, 100);

/**
 * 还可以使用close()方法关闭新打开的窗口
 */
baiduWin.close();

/**
 * 这个方法只能用于window.open()创建的弹出窗口.
 * 虽然不可能不经用户确认就关闭主窗口, 但弹出窗口可以调用top.close()来关闭自己.
 * 关闭窗口以后, 窗口的引用虽然还在, 但只能用于检查其closed属性了
 */
alert(baiduWin.closed);

/**
 * 新创建窗口的window对象有一个属性opener, 指向打开它的窗口.
 * 这个属性只在弹出窗口的最上层window对象有定义, 是指向调用window.open()打开它的窗口或窗格的指针
 */
let baiduWinA = window.open("https://www.baidu.com", "baiduWindow", "height=400,width=400,top=10,left=10,resizeable=yes");
alert(baiduWinA.opener === window);

/**
 * 虽然新建窗口中有指向打开它的窗口的指针, 但反之则不然.
 * 窗口不会跟踪记录自己打开的新窗口, 因此开发者需要自己记录.
 * 
 * 在某些浏览器中, 每个标签页会运行在独立的进程中.
 * 如果一个标签页打开了另一个, 而window对象需要跟另一个标签通信, 那么标签便不能运行在独立的进程中.
 * 在这些浏览器中, 可以将新打开的标签页的opener属性设置为null, 表示新打开的标签页可以运行在独立的进程中.
 * 
 * 把opener设置为null表示新打开的标签页不需要与打开它的标签页通信, 因此可以在独立进程中运行.
 * 这个连接一旦切断, 就无法恢复了.
 */
 let baiduWinB = window.open("https://www.baidu.com", "baiduWindow", "height=400,width=400,top=10,left=10,resizeable=yes");
 baiduWinB.opener = null;
