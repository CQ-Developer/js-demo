/**
 * 11.1.2 以往的异步编程模式
 * 
 * 异步行为是JS的基础, 但以前的实现不理想
 * 在早期的JS中, 只支持定义回调函数来表明异步操作完成
 * 串联多个异步操作是一个常见的问题, 通常需要深度嵌套的回调函数来解决, 俗称"回调地狱"
 * 
 * 假设有以下异步函数, 使用了setTimeout在一秒钟之后执行某些操作
 */
function double(value) {
    setTimeout(() => setTimeout(console.log, 0, value * 2), 1000);
}

/**
 * setTimeout可以定义一个在指定时间之后会被调度执行的回调函数
 * 1000ms之后, JS运行时会把回调函数推到自己的消息队列上去等待执行
 * 推到队列之后, 回调什么时候出列执行对JS代码就完全不可见了
 * 
 * 还有一点, double()函数在setTimeout成功调度异步操作之后会立即退出
 */
double(3);
